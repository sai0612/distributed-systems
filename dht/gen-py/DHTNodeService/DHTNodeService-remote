#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from DHTNodeService import DHTNodeService
from DHTNodeService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  string findSuccessor(int Id)')
    print('  string findPredecessor(int Id)')
    print('  string getClosestPrecedingFinger(int Id)')
    print('  string getSuccessor()')
    print('  string getPredecessor()')
    print('  void updateFingerTable(string node, int i)')
    print('  void updatePredecessor(string node)')
    print('   setWord(string key, string value)')
    print('   getWord(string key)')
    print('   getSuccessorUpdates(string node)')
    print('   getAllNodesDetails(int Id)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = DHTNodeService.Client(protocol)
transport.open()

if cmd == 'findSuccessor':
    if len(args) != 1:
        print('findSuccessor requires 1 args')
        sys.exit(1)
    pp.pprint(client.findSuccessor(eval(args[0]),))

elif cmd == 'findPredecessor':
    if len(args) != 1:
        print('findPredecessor requires 1 args')
        sys.exit(1)
    pp.pprint(client.findPredecessor(eval(args[0]),))

elif cmd == 'getClosestPrecedingFinger':
    if len(args) != 1:
        print('getClosestPrecedingFinger requires 1 args')
        sys.exit(1)
    pp.pprint(client.getClosestPrecedingFinger(eval(args[0]),))

elif cmd == 'getSuccessor':
    if len(args) != 0:
        print('getSuccessor requires 0 args')
        sys.exit(1)
    pp.pprint(client.getSuccessor())

elif cmd == 'getPredecessor':
    if len(args) != 0:
        print('getPredecessor requires 0 args')
        sys.exit(1)
    pp.pprint(client.getPredecessor())

elif cmd == 'updateFingerTable':
    if len(args) != 2:
        print('updateFingerTable requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateFingerTable(args[0], eval(args[1]),))

elif cmd == 'updatePredecessor':
    if len(args) != 1:
        print('updatePredecessor requires 1 args')
        sys.exit(1)
    pp.pprint(client.updatePredecessor(args[0],))

elif cmd == 'setWord':
    if len(args) != 2:
        print('setWord requires 2 args')
        sys.exit(1)
    pp.pprint(client.setWord(args[0], args[1],))

elif cmd == 'getWord':
    if len(args) != 1:
        print('getWord requires 1 args')
        sys.exit(1)
    pp.pprint(client.getWord(args[0],))

elif cmd == 'getSuccessorUpdates':
    if len(args) != 1:
        print('getSuccessorUpdates requires 1 args')
        sys.exit(1)
    pp.pprint(client.getSuccessorUpdates(args[0],))

elif cmd == 'getAllNodesDetails':
    if len(args) != 1:
        print('getAllNodesDetails requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllNodesDetails(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
