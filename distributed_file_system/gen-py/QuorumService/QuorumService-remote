#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from QuorumService import QuorumService
from QuorumService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  bool write(string file, string data)')
    print('  string read(string file)')
    print('  bool coordinatorWrite(string file, string data)')
    print('  string coordinatorRead(string file)')
    print('  bool fileWrite(string file, string data, int fileVersion)')
    print('  string fileRead(string file)')
    print('  int getFileVersion(string file)')
    print('  string listAllFiles()')
    print('  string coordinatorFiles()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = QuorumService.Client(protocol)
transport.open()

if cmd == 'write':
    if len(args) != 2:
        print('write requires 2 args')
        sys.exit(1)
    pp.pprint(client.write(args[0], args[1],))

elif cmd == 'read':
    if len(args) != 1:
        print('read requires 1 args')
        sys.exit(1)
    pp.pprint(client.read(args[0],))

elif cmd == 'coordinatorWrite':
    if len(args) != 2:
        print('coordinatorWrite requires 2 args')
        sys.exit(1)
    pp.pprint(client.coordinatorWrite(args[0], args[1],))

elif cmd == 'coordinatorRead':
    if len(args) != 1:
        print('coordinatorRead requires 1 args')
        sys.exit(1)
    pp.pprint(client.coordinatorRead(args[0],))

elif cmd == 'fileWrite':
    if len(args) != 3:
        print('fileWrite requires 3 args')
        sys.exit(1)
    pp.pprint(client.fileWrite(args[0], args[1], eval(args[2]),))

elif cmd == 'fileRead':
    if len(args) != 1:
        print('fileRead requires 1 args')
        sys.exit(1)
    pp.pprint(client.fileRead(args[0],))

elif cmd == 'getFileVersion':
    if len(args) != 1:
        print('getFileVersion requires 1 args')
        sys.exit(1)
    pp.pprint(client.getFileVersion(args[0],))

elif cmd == 'listAllFiles':
    if len(args) != 0:
        print('listAllFiles requires 0 args')
        sys.exit(1)
    pp.pprint(client.listAllFiles())

elif cmd == 'coordinatorFiles':
    if len(args) != 0:
        print('coordinatorFiles requires 0 args')
        sys.exit(1)
    pp.pprint(client.coordinatorFiles())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
